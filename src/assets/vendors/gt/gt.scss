@use "vars" as *;

html {
  background: black;
  color: white;
  font-family: sans-serif;
}

@mixin scrollbars(
  $size,
  $foreground-color,
  $background-color: mix($foreground-color, white, 50%)
) {
  // For Google Chrome
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
  }

  // For Internet Explorer
  & {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }

  & {
    scrollbar-color: $foreground-color $background-color;
    scrollbar-width: auto;
  }
}

.gt {
  $rw: 5px;
  color: $primary;

  * {
    padding: 0;
    margin: 0;
    border: 0;
    list-style: none;
    text-decoration: none;
    outline: none;
    box-sizing: border-box;
    scrollbar-width: none;
  }

  *::-webkit-scrollbar {
    width: 0;
  }

  .container {
    width: 100vw;
    min-height: 100vh;
  }

  a {
    color: $tertiary;
  }

  .hidden {
    display: none !important;
  }

  .resize_hor {
    width: $rw;
    cursor: col-resize;
  }

  .resize_ver {
    height: $rw;
    cursor: row-resize;
  }

  .scrollbar {
    @include scrollbars(6px, $primary, $secondary);
  }

  .overlay {
    z-index: 100;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
  }

  button {
    padding: 5px;
    background: $secondary;
    border: 1px solid $primary;
    border-radius: $br;
    color: $primary;
    cursor: pointer;

    &:hover {
      background: $hlBg;
      border-color: $hl;
    }
  }

  input:not([type='color']),
  select,
  option,
  textarea {
    padding: 5px;
    border-radius: $br;
    background: $secondary;
    border: 1px solid $primary;
    color: $primary;

    &:focus {
      background: $hlBg;
      border-color: $hl;
    }
  }

  .dropdown {
    position: relative;
    z-index: 125;
    .dd_cont {
      position: absolute;
      display: none;
      background-color: $secondary;
    }
    &:hover .dd_cont {
      display: flex;
      flex-direction: column;
    }
  }

  .mono {
    font-family: monospace;
  }

  .red {
    color: red;
  }

  .lime {
    color: lime;
  }

  .row {
    display: flex;
  }

  .col {
    display: flex;
    flex-direction: column;
  }

  .t {
    color: $tertiary;
  }

  .bw1 {
    border: 1px solid $primary;
  }

  .bw2 {
    border: 2px solid $primary;
  }

  .bg {
    background: $bg;
  }

  table {
    &.bw1 {
      border-collapse: collapse;
    }
    &.bw1 tr {
      border: 1px solid $primary;
    }
  }

  .bs {
    background: $secondary;
  }

  .ab00 {
    position: absolute;
    top: 0;
    left: 0;
  }

  .fixed00 {
    position: fixed;
    top: 0;
    left: 0;
  }

  .pr {
    position: relative;
  }

  .bsr1 {
    background: $secondary;
    border-radius: $br;
    border: 1px solid $primary;
  }

  .as {
    align-content: flex-start;
    justify-content: flex-start;
    align-items: flex-start;
  }

  .jcc {
    justify-content: center;
  }

  .jcsb {
    justify-content: space-between;
  }

  .aic {
    align-items: center;
  }

  .acc {
    align-content: center;
  }

  .oya {
    overflow-y: auto;
  }

  .oyh {
    overflow-y: hidden;
  }

  .oxa {
    overflow-x: auto;
  }

  .oxh {
    overflow-x: hidden;
  }

  .oh {
    overflow: hidden;
  }

  .grow {
    flex-grow: 1;
  }

  .tal {
    text-align: left;
  }

  .tar {
    text-align: right;
  }

  .blur {
    backdrop-filter: blur(5px);
  }

  .hl:hover {
    background: $hlBg;
    border-color: $hl;
  }

  .sticky {
    position: sticky;
    top: 0;
  }

  .w100 {
    width: 100%;
  }

  .h100 {
    height: 100%;
  }

  .maw100 {
    max-width: 100%;
  }

  .mah100 {
    max-height: 100%;
  }

  .wrap {
    flex-wrap: wrap;
  }

  // 0 to 100 + 10
  $k: 0;
  @while $k <= 100 {
    .btd#{$k} {
      background: transparentize(black, 1-$k/100);
    }
    .btl#{$k} {
      background: transparentize(white, 1-$k/100);
    }
    $k: $k + 10;
  }

  // 0 to 100 + 25
  $k: 0;
  @while $k <= 100 {
    .wp#{$k} {
      width: percentage($k/100);
    }
    .hp#{$k} {
      height: percentage($k/100);
    }
    .vw#{$k} {
      width: #{$k}vw;
    }
    .vh#{$k} {
      height: #{$k}vh;
    }
    .mawp#{$k} {
      max-width: percentage($k/100);
    }
    .mahp#{$k} {
      max-height: percentage($k/100);
    }
    $k: $k + 25;
  }

  // 0 to 50 + 5
  $k: 0;
  @while $k <= 50 {
    .w#{$k} {
      width: #{$k * 10}px;
    }
    .h#{$k} {
      height: #{$k * 10}px;
    }
    .maw#{$k} {
      max-width: #{$k * 10}px;
    }
    .mah#{$k} {
      max-height: #{$k * 10}px;
    }
    .mih#{$k} {
      min-height: #{$k * 10}px;
    }
    .miw#{$k} {
      min-width: #{$k * 10}px;
    }
    .gap#{$k} {
      gap: #{$k}px;
    }
    $k: $k + 5;
  }

  // 2 to 6 + 1
  $k: 2;
  @while $k <= 10 {
    .gc#{$k} {
      display: grid;
      grid-template-columns: repeat(#{$k}, auto);
    }
    $k: $k + 1;
  }

  .br {
    border-radius: $br;
  }

  .brt {
    border-radius: $br $br 0 0;
  }

  .brr {
    border-radius: 0 $br $br 0;
  }

  .brb {
    border-radius: 0 0 $br $br;
  }

  .brl {
    border-radius: $br 0 0 $br;
  }

  $props: (
    'tl': top-left,
    'tr': top-right,
    'br': bottom-right,
    'bl': bottom-left,
  );

  @each $k, $v in $props {
    .br#{$k} {
      border-#{$v}-radius: $br;
    }
  }

  $props: (
    't': top,
    'l': left,
    'r': right,
    'b': bottom,
  );

  @each $k, $v in $props {
    @for $i from 0 through 5 {
      .bw#{$k}#{$i} {
        border-style: solid;
        border-color: $primary;
        border-#{$v}-width: #{$i}px;
      }
    }
  }

  $props: (
    'm': margin,
    'ml': margin-left,
    'mr': margin-right,
    'mt': margin-top,
    'mb': margin-bottom,
    'p': padding,
    'pl': padding-left,
    'pr': padding-right,
    'pt': padding-top,
    'pb': padding-bottom,
    'fs': font-size,
  );

  @each $k, $v in $props {
    .#{$k}a {
      @each $x in $v {
        #{$x}: auto;
      }
    }
    @for $i from 0 through 5 {
      .#{$k}#{$i} {
        #{$v}: #{$i}rem;
      }
      .c_#{$k}#{$i} > * {
        #{$v}: #{$i}rem;
      }
    }
  }

  $props: (
    'mlr': (
      margin-left,
      margin-right,
    ),
    'plr': (
      padding-left,
      padding-right,
    ),
    'mtb': (
      margin-top,
      margin-bottom,
    ),
    'ptb': (
      padding-top,
      padding-bottom,
    ),
  );

  @each $k, $v in $props {
    .#{$k}a {
      @each $x in $v {
        #{$x}: auto;
      }
    }
    @for $i from 0 through 5 {
      .#{$k}#{$i} {
        @each $x in $v {
          #{$x}: #{$i}rem;
        }
      }
      .c_#{$k}#{$i} > * {
        @each $x in $v {
          #{$x}: #{$i}rem;
        }
      }
    }
  }

  .p0 {
    padding: 0;
  }

  .m0 {
    margin: 0;
  }

  .b0 {
    border: 0;
  }

  .br0 {
    border-radius: 0;
  }

  .shrink0 {
    flex-shrink: 0;
  }
  .bscb {
    box-sizing: content-box;
  }
}
